{"version":3,"sources":["../../es6/types/GQLJSON.js"],"names":["GQLJSON","serialize","value","name","parseValue","parseLiteral","ast","kind","STRING","BOOLEAN","INT","parseInt","FLOAT","parseFloat","OBJECT","fields","forEach","field","LIST","values","map","apiDocs","DOC_CLASS","joinLines"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;IAGaA,O,WAAAA,O,WADZ,oBAAO,aAAP,C,gBACM,MAAMA,OAAN,8BAAgC;AACrC;;;;;;;;;;;AAWA,SAAOC,SAAP,CAAiBC,KAAjB,EAAsC;AACpC,WAAOA,KAAP;AACD;;AAED;;;;;;;;;AASA,aAAWC,IAAX,GAAkB;AAChB,WAAO,MAAP;AACD;;AAED;;;;;;;;;;;AAWA,SAAOC,UAAP,CAAkBF,KAAlB,EAAyC;AACvC,WAAOA,KAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAOG,YAAP,CAAoBC,GAApB,EAAyC;AACvC,YAAQA,IAAIC,IAAZ;AACE,WAAK,eAAKC,MAAV;AACA,WAAK,eAAKC,OAAV;AACE,eAAOH,IAAIJ,KAAX;;AAEF,WAAK,eAAKQ,GAAV;AACE,eAAOC,SAASL,IAAIJ,KAAb,EAAoB,EAApB,CAAP;AACF,WAAK,eAAKU,KAAV;AACE,eAAOC,WAAWP,IAAIJ,KAAf,CAAP;;AAEF,WAAK,eAAKY,MAAV;AAAkB;AAChB,gBAAMZ,QAAQ,sBAAc,IAAd,CAAd;AACAI,cAAIS,MAAJ,CAAWC,OAAX,CAAmBC,SAAS;AAC1Bf,kBAAMe,MAAMd,IAAN,CAAWD,KAAjB,IAA0BF,QAAQK,YAAR,CAAqBY,MAAMf,KAA3B,CAA1B;AACD,WAFD;;AAIA,iBAAOA,KAAP;AACD;;AAED,WAAK,eAAKgB,IAAV;AACE,eAAOZ,IAAIa,MAAJ,CAAWC,GAAX,CAAepB,QAAQK,YAAvB,CAAP;;AAEF;AACE,eAAO,IAAP;AAvBJ;AAyBD;;AAED;AACA,SAAOgB,OAAP,GAAyB;AACvB,UAAM,EAAEC,SAAF,EAAaC,SAAb,KAA2B,IAAjC;;AAEA,WAAOA,SAAU;;uEAGf,sBAAuB;KAHzB;AAKD;AA/FoC,C","file":"GQLJSON.js","sourceRoot":"es6","sourcesContent":["import { GQLScalar } from '../GQLScalar'\nimport { Schema } from '../decorators/Schema'\nimport { Kind } from 'graphql/language'\n\n@Schema('scalar JSON')\nexport class GQLJSON extends GQLScalar {\n  /**\n   * Since JSON stands for JavaScript Object Notation, its values need no\n   * direct conversion. Simply pass back what is passed in.\n   *\n   * @memberof GQLJSON\n   * @method serialize\n   * @static\n   *\n   * @param {mixed|Null} value a valid JavaScript object\n   * @return {mixed|Null} the same value that was passed in.\n   */\n  static serialize(value: mixed): mixed {\n    return value;\n  }\n  \n  /**\n   * All processing by GraphQL Lattice uses the Class.name property. We want \n   * to report JSON and not GQLJSON so this is what we do.\n   *\n   * @memberof GQLJSON\n   * @method name \n   * @static\n   * @type {String}\n   */\n  static get name() {\n    return 'JSON';\n  }\n\n  /**\n   * Since JSON stands for JavaScript Object Notation, its values need no\n   * direct conversion. Simply pass back what is passed in.\n   *\n   * @memberof GQLJSON\n   * @method parseValue\n   * @static\n   *\n   * @param {mixed|Null} value a valid JavaScript object\n   * @return {mixed|Null} the same value that was passed in.\n   */\n  static parseValue(value: ?mixed): ?mixed {\n    return value;\n  }\n\n  /**\n   * Given literal values, `parseLiteral` will walk the object and build\n   * up an equivalent version of itself as an object that should `parse()`\n   * and `stringify()` accordingly.\n   *\n   * @memberof GQLJSON\n   * @method parseLiteral\n   * @static\n   *\n   * @param {Object} ast the Abstract Syntax Tree representing the JSON\n   * type to parse.\n   * @return {String|Array|Object|Number|Null} valid JSON types converted as\n   * expected.\n   */\n  static parseLiteral(ast: Object): ?mixed {\n    switch (ast.kind) {\n      case Kind.STRING:\n      case Kind.BOOLEAN:\n        return ast.value;\n\n      case Kind.INT:\n        return parseInt(ast.value, 10);\n      case Kind.FLOAT:\n        return parseFloat(ast.value);\n\n      case Kind.OBJECT: {\n        const value = Object.create(null);\n        ast.fields.forEach(field => {\n          value[field.name.value] = GQLJSON.parseLiteral(field.value)\n        })\n\n        return value;\n      }\n\n      case Kind.LIST:\n        return ast.values.map(GQLJSON.parseLiteral)\n\n      default:\n        return null;\n    }\n  }\n\n  /** @inheritdoc */\n  static apiDocs(): Object {\n    const { DOC_CLASS, joinLines } = this;\n\n    return joinLines`\n      The \\`JSON\\` scalar type represents JSON values as specified by\n      [ECMA-404](http://www.ecma-international.org/publications/files${\n      'ECMA-ST/ECMA-404.pdf'})\n    `\n  }\n}\n"]}