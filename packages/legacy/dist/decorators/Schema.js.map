{"version":3,"sources":["../../es6/decorators/Schema.js"],"names":["Schema","schemaString","target","SCHEMA","get"],"mappings":";;;;;;;;;;QA0BgBA,M,GAAAA,M;;;;AA1BhB;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAuBO,SAASA,MAAT,CAAgBC,YAAhB,EAAsC;AAC3C,SAAO,UAASC,MAAT,EAAyB;AAC9B;AACA,oCAAwBA,MAAxB,EAAgC;AAC9BC,cAAQ;AACNC,aAAK;AAAA,iBAAMH,YAAN;AAAA;AADC;AADsB,KAAhC;AAKD,GAPD;AAQD;;kBAEcD,M","file":"Schema.js","sourceRoot":"es6","sourcesContent":["/** @namespace decorators */\n/** @flow */\n\n/**\n * This decorator allows you to specify the SCHEMA getter and associated\n * string as a parameter to the decorator itself. So, for example:\n *\n * <code>\n * @Schema(`\n *   type Item {\n *     name: String\n *     cost: String\n *   }\n * `)\n * export class Item extends GQLBase {\n *   // ...\n * }\n * </code>\n *\n * @function 🏷⠀Schema\n * @memberof! decorators\n * @since 2.2.0\n *\n * @param {string} schemaString a GraphQL IDL compliant string for defining a\n * GraphQL Object Schema.\n */\nexport function Schema(schemaString: string) {\n  return function(target: Object) {\n    // @ComputedType\n    Object.defineProperties(target, {\n      SCHEMA: {\n        get: () => schemaString\n      }\n    });\n  }\n}\n\nexport default Schema;\n"]}