{"version":3,"sources":["../../es6/decorators/AdjacentSchema.js"],"names":["AdjacentSchema","classModule","target","SCHEMA","module","get","ADJACENT_FILE"],"mappings":";;;;;;;;;;;;;;;kBAuBwBA,c;;AApBxB;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBe,SAASA,cAAT,CAAwBC,WAAxB,EAA6C;AAC1D,SAAO,UAASC,MAAT,EAA0B;AAC/B;AACA;AACA;AACA;AACA,WAAOA,OAAOC,MAAd;AACA;AACA,WAAOD,OAAOE,MAAd;;AAEA;AACA,WAAO,gCAAwBF,MAAxB,EAAgC;AACrCE,cAAQ;AACNC,aAAK,MAAMJ;AADL,OAD6B;;AAKrCE,cAAQ;AACNE,aAAK,MAAM,iBAAQC;AADb,OAL6B;;AASrC,OAAC,mBAAW,iBAAX,CAAD,GAAiC;AAC/BD,aAAK,MAAM;AADoB;AATI,KAAhC,CAAP;AAaD,GAvBD;AAwBD,C,CAhDD;;;QAkDSL,c,GAAAA,c","file":"AdjacentSchema.js","sourceRoot":"es6","sourcesContent":["/** @namespace decorators */\n// @flow\n\nimport { GQLBase } from '../GQLBase'\n\n/**\n * A decorator that does three things. First it defines the\n * module() static method that is required when using adjacent\n * schema files. Secondly, it defines a SCHEMA getter that\n * returns `GQLBase.ADJACENT_FILE`. Finally it sets a static\n * getter with the `Symbol`, `@adjacentSchema` so that other\n * can determine whether or not the decorator was used.\n *\n * @function 🏷⠀AdjacentSchema\n * @memberof! decorators\n * @since 2.1.0\n *\n * @param {mixed} object the object on which to apply the decorator\n * @param {String} property the name of the object or property to\n * which the decorator is being applied.\n * @param {Object} descriptor a standard Object.defineProperty style\n * descriptor object.\n */\nexport default function AdjacentSchema(classModule: Object) {\n  return function(target: GQLBase) {\n    // Attempt to remove the SCHEMA and module properties or functions from\n    // the class being decorated. This is not guaranteed to work but should\n    // increase compatibilty and success rates.\n    // @ComputedType\n    delete target.SCHEMA;\n    // @ComputedType\n    delete target.module;\n\n    // @ComputedType\n    return Object.defineProperties(target, {\n      module: {\n        get: () => classModule\n      },\n\n      SCHEMA: {\n        get: () => GQLBase.ADJACENT_FILE\n      },\n\n      [Symbol.for('@adjacentSchema')]: {\n        get: () => true\n      }\n    });\n  }\n}\n\nexport { AdjacentSchema };\n"]}